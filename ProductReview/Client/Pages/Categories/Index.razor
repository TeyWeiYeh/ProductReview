@page "/categories/{cname}"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@* allows the page to be intercepted *@
@implements IDisposable


<h3 class="card=title">Products</h3>
<br />
<br />
<br />

@if (Products == null)
{
	<div class="alert alert-info">Loading Products...</div>
}
else
{
	<table class="table table-responsive" id="productsTable">
		<thead>
			<tr>
				<th>Product</th>
				<th>Brand</th>
				<th>Category</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var product in Products)
			{
				<tr>
					<td>@product.Name</td>
					<td>@(product.Brand?.Name ?? "No Brand")</td>
					<td>
						<a href="/products/view/@product.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>
						<button class="btn btn-danger" @onclick="@(()=>AddToFavourites(product, product.Id))">
							<span class="oi oi-heart"></span>
						</button>
					</td>
	
				</tr>
			}
		</tbody>
	</table>
}

@code {
	[Parameter] public string? cname { get; set; }
	private List<Product>? Products;
	private List<Favourite>? Favourites;
	private List<Category>? Categories;
	Product? product = new Product();

	protected async override Task OnParametersSetAsync()
	@*when page is loaded/loading, this method will be called*@
	{
		_interceptor.MonitorEvent();
		Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
		if (!string.IsNullOrEmpty(cname))
		{
			string lowerCname = cname.ToLowerInvariant();
			Products = Products.Where(r => r.Category?.Name.ToLowerInvariant() == cname).ToList();
		}
	}

	async Task AddToFavourites(Product product, int productId)
	{
		var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to add {product.Name} to your favourites?");
		if (confirm)
		{

			Favourite favourite = new Favourite
			{
			 	ProductId = productId,
			 	Name = product.Name,
			 	BrandId = product.BrandId,
			 	CategoryId = product.CategoryId
			};
			var response = await _client.PostAsJsonAsync($"{Endpoints.FavouritesEndpoint}",favourite);
			// If the response status code is Conflict, it means the product is already in the favorites
			if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
			{
				// Show an alert to the user and return from the method
				await js.InvokeVoidAsync("alert", $"{product.Name} is already in your favourites!");
				return;
			}
			await OnParametersSetAsync();
		}
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#productsTable");
	}

	public void Dispose()
	{
		_interceptor.DisposeEvent();
		js.InvokeVoidAsync("DataTablesDispose", "#productsTable");
	}
}
