@inject HttpClient _client

<EditForm Model="@request" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<fieldset disabled="@Disabled">
		<div class="form-group">
			<label>Existing Review:</label>
			<InputSelect @bind-Value="@request.ReviewId" class="form-control">
				<option value="">-- Select Review --</option>
				@if (Reviews != null)
				{
					foreach (var review in Reviews)
					{
						<option value="@review.Id">@review.Title</option>
					}
				}
			</InputSelect>
		</div>
		<div class="form-group">
			<label>Review Title:</label>
			<InputText @bind-Value="@request.Title" class="form-control" />
			<ValidationMessage For="@(() => request.Title)" />
		</div>
		<div class="form-group">
			<label>Description:</label>
			<InputText @bind-Value="@request.Description" class="form-control" />
			<ValidationMessage For="@(() => request.Description)" />
		</div>
		<div class="form-group">
			<label>Value for money:</label>
			<InputNumber @bind-Value="@request.Value" class="form-control" />
			<ValidationMessage For="@(() => request.Value)" />
		</div>
		<div class="form-group">
			<label>Battery life:</label>
			<InputNumber @bind-Value="@request.BatteryLife" class="form-control" />
			<ValidationMessage For="@(() => request.BatteryLife)" />
		</div>
		<div class="form-group">
			<label>Performance:</label>
			<InputNumber @bind-Value="@request.Performance" class="form-control" />
			<ValidationMessage For="@(() => request.Performance)" />
		</div>
		<div class="form-group">
			<label>User Friendliness:</label>
			<InputNumber @bind-Value="@request.UserFriendly" class="form-control" />
			<ValidationMessage For="@(() => request.UserFriendly)" />
		</div>
		@if (request.Id > 0)
		{
			<div class="form-group">
				<label>Date of comment:</label>
				<InputDate @bind-Value="@request.DateCreated" class="form-control" />
				<ValidationMessage For="@(() => request.DateCreated)" />
			</div>
	}
	</fieldset>

	@if (!Disabled)
	{
		<button type="submit" class="btn btn-primary">
			@ButtonText
		</button>
	}
	
</EditForm>


@code {
	[Parameter] public bool Disabled { get; set; }
	[Parameter] public Request? request { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }

	private IList<Review>? Reviews;
	protected async override Task OnInitializedAsync()
	{
		Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
	}
}
