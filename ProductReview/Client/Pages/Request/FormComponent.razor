@inject HttpClient _client

<EditForm Model="@request" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<fieldset disabled="@Disabled">
		<div class="form-group">
			<label>Review Title:</label>
			<InputText @bind-Value="@request.Title" class="form-control" />
			<ValidationMessage For="@(() => request.Title)" />
		</div>
		<br/>
		<div class="form-group">
			<label>Description:</label>
			<InputTextArea @bind-Value="@request.Description" class="form-control" />
			<ValidationMessage For="@(() => request.Description)" />
		</div>
		<br />
		<div class="form-group">
			<label>Value for money:</label>
			<div class="star-rating">
				@for (int i = 1; i <= 5; i++)
				{
					var rating = i;
					<span class="star @(rating <= request.Value ? "filled" : "")"
						  @onclick="() => SetRating(rating, nameof(request.Value))">
						&#9733;
					</span>
				}
			</div>
			<input type="hidden" @bind-value="request.Value" />
			<ValidationMessage For="@(() => request.Value)" />
		</div>
		<br />
		<div class="form-group">
			<label>Battery Life:</label>
			<div class="star-rating">
				@for (int i = 1; i <= 5; i++)
				{
					var rating = i;
					<span class="star @(rating <= request.BatteryLife ? "filled" : "")"
						  @onclick="() => SetRating(rating, nameof(request.BatteryLife))">
						&#9733;
					</span>
				}
			</div>
			<input type="hidden" @bind-value="request.BatteryLife" />
			<ValidationMessage For="@(() => request.BatteryLife)" />
		</div>
		<br />
		<div class="form-group">
			<label>Performance:</label>
			<div class="star-rating">
				@for (int i = 1; i <= 5; i++)
				{
					var rating = i;
					<span class="star @(rating <= request.Performance ? "filled" : "")"
						  @onclick="() => SetRating(rating, nameof(request.Performance))">
						&#9733;
					</span>
				}
			</div>
			<input type="hidden" @bind-value="request.Performance" />
			<ValidationMessage For="@(() => request.Performance)" />
		</div>
		<br />
		<div class="form-group">
			<label>User Friendliness:</label>
			<div class="star-rating">
				@for (int i = 1; i <= 5; i++)
				{
					var rating = i;
					<span class="star @(rating <= request.UserFriendly ? "filled" : "")"
						  @onclick="() => SetRating(rating, nameof(request.UserFriendly))">
						&#9733;
					</span>
				}
			</div>
			<input type="hidden" @bind-value="request.UserFriendly" />
			<ValidationMessage For="@(() => request.UserFriendly)" />
		</div>
		<br />
		@if (!Disabled)
		{
			<div class="form-group">
				<label>Image:</label>
				<InputFile OnChange="OnFileChange" />
				<ValidationMessage For="@(() => request.Image)" />
			</div>
		}
		<br />

	</fieldset>

	@if (!Disabled)
	{
		<button type="submit" class="btn btn-success btn-block">
			@ButtonText
		</button>
	}
</EditForm>

@code {
	[Parameter] public bool Disabled { get; set; }
	[Parameter] public Request? request { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }
	private IList<Product>? Products;

	protected async override Task OnInitializedAsync()
	{
		Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
	}

	private async Task OnFileChange(InputFileChangeEventArgs e)
	{
		//This line sets the image format that you want to use. In this case, it's PNG.
		var format = "image/png";
		//This takes the image the user selected, and resizes it to be 300 pixels by 300 pixels using RequestImageFileAsync method.
		var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
		//This line reads the resized image and stores it in a buffer.
		var buffer = new byte[resizedImage.Size];
		//This loads the resized image into the buffer we just created.
		await resizedImage.OpenReadStream().ReadAsync(buffer);
		//This line converts the buffer into a base64 string, and stores it in a variable called imageData.
		var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
		//This sets the image property of the review object to the imageData variable.
		request.Image = imageData;

		Console.WriteLine(request.Image);
	}

	private void SetRating(int rating, string propertyName)
	{
		switch (propertyName)
		{
			case nameof(Request.Value):
				request.Value = rating;
				break;
			case nameof(Request.BatteryLife):
				request.BatteryLife = rating;
				break;
			case nameof(Request.Performance):
				request.Performance = rating;
				break;
			case nameof(Request.UserFriendly):
				request.UserFriendly = rating;
				break;
		}
	}
}

