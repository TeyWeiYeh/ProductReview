@inject HttpClient _client

<EditForm Model="@product" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<fieldset disabled="@Disabled">
		<div class="form-group">
			<label>Product Name:</label>
			<div>
			<InputText @bind-Value="@product.Name" class="form-control" />
			<ValidationMessage For="@(() => product.Name)" />
			</div>
		</div>
		<br />

		<div class="form-group">
			<label>Product Description:</label>
			<InputText @bind-Value="@product.Description" class="form-control" />
			<ValidationMessage For="@(() => product.Description)" />
		</div>
		<br />
		<div class="form-group">
			<label>Product Brand:</label>
			<div>
			<InputSelect @bind-Value="product.BrandId" class="form-control">
				<option value="">-- Select Brand --</option>
				@if (Brands != null)
				{
					foreach (var brand in Brands)
					{
						<option value="@brand.Id">@brand.Name</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => product.BrandId)" />
			</div>
		</div>
		<br />
		<div class="form-group">
			<label>Product Category:</label>
			<div>
				<InputSelect @bind-Value="product.CategoryId" class="form-control">
					<option value="">-- Select Category --</option>
					@if (Categories != null)
					{
						foreach (var category in Categories)
						{
							<option value="@category.Id">@category.Name</option>
						}
					}
				</InputSelect>
				<ValidationMessage For="@(() => product.CategoryId)" />
			</div>
		</div>
		<br />

		@if (!Disabled)
		{
			<div class="form-group">
				<label>Image:</label>
				<InputFile OnChange="OnFileChange" />
				<ValidationMessage For="@(() => product.Image)" />
			</div>
		}

	</fieldset>

	@if(!Disabled)
	{
		<button type="submit" class="btn btn-primary">
			@ButtonText
		</button>
	}
	
</EditForm>

@code {
	[Parameter] public bool Disabled { get; set; }
	[Parameter] public Product? product { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }

	private IList<Category>? Categories;
	private IList<Brand>? Brands;

	protected override async Task OnInitializedAsync()
	{
		Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
		Brands = await _client.GetFromJsonAsync<List<Brand>>($"{Endpoints.BrandsEndpoint}");
	}

	private async Task OnFileChange(InputFileChangeEventArgs e)
	{
		//This line sets the image format that you want to use. In this case, it's PNG.
		var format = "image/png";
		//This takes the image the user selected, and resizes it to be 300 pixels by 300 pixels using RequestImageFileAsync method.
		var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
		//This line reads the resized image and stores it in a buffer.
		var buffer = new byte[resizedImage.Size];
		//This loads the resized image into the buffer we just created.
		await resizedImage.OpenReadStream().ReadAsync(buffer);
		//This line converts the buffer into a base64 string, and stores it in a variable called imageData.
		var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
		//This sets the image property of the review object to the imageData variable.
		product.Image = imageData;

		Console.WriteLine(product.Image);
	}

}
