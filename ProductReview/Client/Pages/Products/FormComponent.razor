@inject HttpClient _client


<h3>FormComponent</h3>

<EditForm Model="@product" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<fieldset disabled="@Disabled">
		<div class="form-group">
			<label>Product Name:</label>
			<div>
			<InputText @bind-Value="@product.Name" class="form-control" />
			<ValidationMessage For="@(() => product.Name)" />
			</div>
		</div>

		<div class="form-group">
			<label>Product Description:</label>
			<InputText @bind-Value="@product.Description" class="form-control" />
			<ValidationMessage For="@(() => product.Description)" />
		</div>

		<div class="form-group">
			<label>Product Brand:</label>
			<div>
			<InputSelect @bind-Value="product.BrandId" class="form-control">
				<option value="">-- Select Brand --</option>
				@if (Brands != null)
				{
					foreach (var brand in Brands)
					{
						<option value="@brand.Id">@brand.Name</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => product.BrandId)" />
			</div>
		</div>

	</fieldset>

	@if(!Disabled)
	{
		<button type="submit" class="btn btn-primary">
			@ButtonText
		</button>
	}
	<BackToList Target="products" />
</EditForm>

@code {
	[Parameter] public bool Disabled { get; set; }
	[Parameter] public Product? product { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }

	//private IList<Category>? Categories;
	//private IList<Review>? Reviews;
	private IList<Brand>? Brands;

	protected override async Task OnInitializedAsync()
	{
		//Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
		Brands = await _client.GetFromJsonAsync<List<Brand>>($"{Endpoints.BrandsEndpoint}");
	}

}
