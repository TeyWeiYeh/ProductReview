@page "/products/view/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3>View</h3>

<FormComponent product="product" Disabled="true" />

@foreach (var review in Reviews ?? Enumerable.Empty<Review>())
{
	@if (review.ProductId == Id){
		<br />
		<div class="card border-success mb-3" style="max-width: 36rem;">
			<div class="card-header bg-transparent border-success">@review.Title</div>
			<div class="card-body text-success">
				<p>@review.Description</p>
				<label>Value:</label>
				<p class="star-rating" data-rating="@review.Value"></p>
				<p>Battery Life:</p>
				<p class="star-rating" data-rating="@review.BatteryLife"></p>
				<p>Performance:</p>
				<p class="star-rating" data-rating="@review.Performance"></p>
				<p>User Friendly:</p>
				<p class="star-rating" data-rating="@review.UserFriendly"></p>
			</div>
			<div class="card-footer bg-transparent border-success">@review.DateCreated</div>
		</div>
    }
}

<a href="/reviews/create/{Id}" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Write a review
</a>
<br />
<br />

<button @onclick=ReviewPage>Review page</button>


@code {
	[Parameter] public int Id { get; set; }
	Product? product = new Product();
	private List<Review>? Reviews;

	protected async override Task OnInitializedAsync()
	{
		product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{Id}");
		Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
	}

	private void ReviewPage()
    {
        _navManager.NavigateTo($"/reviews/create/{Id}");
    }
}
