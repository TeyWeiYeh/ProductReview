@page "/products/view/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Lilita+One&display=swap" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

@if (Categories != null)
{
	@foreach (var category in Categories.Where(c => c.Id == product.CategoryId))
	{
		<a href="/categories/@category.Name.ToLower()" class="bi bi-arrow-left-short">Back to @category.Name page</a>
	}
}
<br />
<br />

@if (double.IsNaN(@CalculateProductAvg(Reviews)))
{
	<h5>Rating: 0.0</h5>
	<h5>Reviews found: 0</h5>
}
else
{
	<h5>Rating: @CalculateProductAvg(Reviews)</h5>
	@if(filteredReviews == null)
    {
		<h5>Reviews found: 0</h5>
	}
	else
	{
		<h5>Reviews found: @filteredReviews.Count</h5>
	}

}
<br />
<button @onclick=ReviewPage class="btn btn-secondary">Write a review</button>
<br/>
<br />

<section class="product">
	<div class="description">
		<div id="carouselExampleDark" class="carousel carousel-dark slide">
			<div class="carousel-indicators">
				<button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
				<button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="1" aria-label="Slide 2"></button>
				<button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="2" aria-label="Slide 3"></button>
			</div>
			<div class="carousel-inner">
				<div class="carousel-item active" data-bs-interval="10000">
					<img src="https://store.storeimages.cdn-apple.com/8756/as-images.apple.com/is/iphone-13-finish-unselect-gallery-1-202207_FMT_WHH?wid=1200&hei=630&fmt=jpeg&qlt=95&.v=1654894166228" class="d-block w-100 object-fit-fill" height="100%" alt="iphone-13-all-colours">
					<div class="carousel-caption d-none d-md-block">
					</div>
				</div>
				<div class="carousel-item" data-bs-interval="2000">
					<img src="..." class="d-block w-100" alt="...">
					<div class="carousel-caption d-none d-md-block">
					</div>
				</div>
				<div class="carousel-item">
					<img src="..." class="d-block w-100" alt="...">
					<div class="carousel-caption d-none d-md-block">
					</div>
				</div>
			</div>
			<button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="prev">
				<span class="carousel-control-prev-icon" aria-hidden="true"></span>
				<span class="visually-hidden">Previous</span>
			</button>
			<button class="carousel-control-next" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="next">
				<span class="carousel-control-next-icon" aria-hidden="true"></span>
				<span class="visually-hidden">Next</span>
			</button>
		</div>
		<div class="product-details">
			<h2 class="title">@product.Name</h2>
			<h3><span class="pricing">$750</span></h3>
			<div class="colours">
				<p>Available colours</p>
			</div>
			<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et 
			dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
			Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui 
			officia deserunt mollit anim id est laborum.</p>
			<p>
				Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
				dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
				Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui
				officia deserunt mollit anim id est laborum.
			</p>
		</div>
	</div>
</section>

<div class="review-section">
@foreach (var review in Reviews ?? Enumerable.Empty<Review>())
{
	@if (review.ProductId == Id){
		<br />
		<div class="container" @onclick="()=>HandleButton(review.Id)">
			<div class="title">
				<div class="icons">
				<i class="bi bi-person-circle"></i>
				<p>@review.Username</p>
				</div>
				<div class="actions">
					@if(review.Username == UserName)
					{
						<button class="btn btn-danger" @onclick="@(()=>Delete(review.Id))">
							<span class="oi oi-delete"></span>
						</button>
					}
				</div>
			</div>
			<div class="body">
					<p class="star-rating" data-rating="@Convert.ToInt32(Math.Round(CalculateAverage(review.Value, review.BatteryLife, review.Performance, review.UserFriendly)))"></p>
				<div class="content">
					<a href="/reviews/view/@review.Id">@review.Title</a>	
				</div>
			</div>
			<div class="footer">
					<p class="card-text"><small class="text-muted">@CalculateMinutes(review.DateCreated, review.DateUpdated)</small></p>
			</div>
		</div>
    }
}

<br />
</div>

@if (Products != null)
{
	<hr />
	<h4>Related Products</h4>
	<br />
	<div class="card-deck">
		@foreach (var product in filteredProducts)
		{
			<div class="card" @onclick="()=>GotoProduct(product.Id, _navManager)">
				<img class="card-img-top" src="@product.Image" width="100" height="150"alt="Product Image">
				<div class="card-body">
					<h5 class="card-title">@product.Name</h5>
					<p class="card-text">@product.Description</p>
					<p class="card-text"><small class="text-muted">@CalculateMinutes(product.DateCreated,product.DateUpdated)</small></p>
				</div>
			</div>
		}
	</div>
	<br />
}




@code {
	[Parameter] public int Id { get; set; }
	Product? product = new Product();
	Category? productCat = new Category();
	Brand? brand = new Brand();
	private List<Review>? Reviews;
	private List<Category>? Categories;
	private List<Product>? Products;
	private List<Brand>? Brands;
	private List<double> AverageRating = new List<double>();
	private string? UserName;
	private List<Review>? filteredReviews;
	private List<Product>? filteredProducts;

	protected async override Task OnInitializedAsync()
	{
		product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{Id}");
		Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
		Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
		Brands = await _client.GetFromJsonAsync<List<Brand>> ($"{Endpoints.BrandsEndpoint}");
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		UserName = authState.User.Identity.Name;
		Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
		filteredProduct(Id, product.CategoryId);
	}

	private void ReviewPage()
	{
		_navManager.NavigateTo($"/reviews/create/{Id}");
	}

	private string CalculateMinutes(DateTime dateCreated, DateTime dateUpdated)
	{
		TimeSpan difference = DateTime.Now - dateUpdated;
		TimeSpan CheckUpdated = dateCreated - dateUpdated;
		if (Math.Abs(CheckUpdated.TotalMinutes) < 1)
		{
			return $"Posted on: {dateCreated}";
		}
		else
		{
			if (difference.TotalDays >= 1)
			{
				int days = Convert.ToInt32(difference.TotalDays);
				if (days >= 1 && days < 2)
				{
					return $"Last updated: 1 day ago";
				}
				else
				{
					return $"Last updated: {days} days ago";
				}
			}
			else if (difference.TotalHours >= 1)
			{
				return $"Last updated: {Convert.ToInt32(difference.Hours)} hour(s) ago";
			}
			else if (difference.TotalMinutes >= 1)
			{
				return $"Last updated: {Convert.ToInt32(difference.TotalMinutes)} minute(s) ago";
			}
			else
			{
				return "Just updated";
			}
		}

	}

	private double CalculateAverage(int value, int batteryLife, int performance, int userFriendly)
	{
		double average = (value + batteryLife + performance + userFriendly) / 4.0;
		return average;
	}

	private double CalculateProductAvg(List<Review>? Reviews)
	{
		double sum = 0;
		@if(Reviews == null)
		{
			return 0.0;
		}
		else
        {
			filteredReviews = Reviews.Where(q => q.ProductId == Id).ToList();
			foreach (var review in filteredReviews)
			{
                var rating = CalculateAverage(review.Value, review.BatteryLife, review.Performance, review.UserFriendly);
				sum += rating;
            }
			double productAvg = sum / filteredReviews.Count;
			double roundedProductAvg = Math.Round(productAvg, 2);
			return roundedProductAvg;
		}
	}

	async Task Delete(int reviewId)
	{
		if (Reviews != null)
		{
			var review = Reviews.First(r => r.Id == reviewId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {review.Title}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
				_navManager.NavigateTo($"/products/view/{Id}", true);
			}
		}
	}

	private void HandleButton(int reviewId)
	{
		_navManager.NavigateTo($"/reviews/view/{reviewId}");
	}

	private void GotoProduct(int productId, NavigationManager manager)	
	{
		_navManager.NavigateTo($"/products/view/{productId}", true);

	}

	private void filteredProduct(int productId, int? categoryId)
	{
		filteredProducts = Products.Where(r => r.Id != productId && r.CategoryId == categoryId).ToList();
	}
}
