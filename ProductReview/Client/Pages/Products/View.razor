@page "/products/view/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js

<h3>Viewing @product.Name</h3>


@if (double.IsNaN(@CalculateProductAvg(Reviews)))
{
	<h5>Rating: 0.0</h5>
	<h5>Reviews found: 0</h5>
}
else
{
	<h5>Rating: @CalculateProductAvg(Reviews)</h5>
	@if(filteredReviews == null)
    {
		<h5>Reviews found: 0</h5>
	}
	else
	{
		<h5>Reviews found: @filteredReviews.Count</h5>
	}

}



<br />
<button @onclick=ReviewPage class="btn btn-secondary">Write a review</button>
<br/>
<br />

<FormComponent product="product" Disabled="true" />

@if(Categories != null)
{
	@foreach(var category in Categories.Where(c=>c.Id==product.CategoryId))
    {
		<a href="/categories/@category.Name.ToLower()" class="btn btn-secondary">Back to @category.Name page</a>
    }
}



<div class="comment-section">
@foreach (var review in Reviews ?? Enumerable.Empty<Review>())
{
	@if (review.ProductId == Id){
		<br />
		<div class="container">
			<div class="title">
				<div class="icons">
				<i class="bi bi-person-circle"></i>
				<p>@review.Username</p>
				</div>
				<div class="actions">
					@if(review.Username == UserName)
					{
						<button class="btn btn-danger" @onclick="@(()=>Delete(review.Id))">
							<span class="oi oi-delete"></span>
						</button>
					}
				</div>
			</div>
			<div class="body">
					<p class="star-rating" data-rating="@Convert.ToInt32(Math.Round(CalculateAverage(review.Value, review.BatteryLife, review.Performance, review.UserFriendly)))"></p>
				<div class="content">
					<a href="/reviews/view/@review.Id">@review.Title</a>	
				</div>
			</div>
			<div class="footer">
					<p class="card-text"><small class="text-muted">@CalculateMinutes(review.DateCreated, review.DateUpdated)</small></p>
			</div>
		</div>
    }
}

<br />
</div>



@code {
	[Parameter] public int Id { get; set; }
	Product? product = new Product();
	private List<Review>? Reviews;
	private List<Category>? Categories;
	private List<double> AverageRating = new List<double>();
	private string? UserName;
	private List<Review>? filteredReviews;

	protected async override Task OnInitializedAsync()
	{
		product = await _client.GetFromJsonAsync<Product>($"{Endpoints.ProductsEndpoint}/{Id}");
		Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
		Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		UserName = authState.User.Identity.Name;
	}

	private void ReviewPage()
	{
		_navManager.NavigateTo($"/reviews/create/{Id}");
	}

	private string CalculateMinutes(DateTime dateCreated, DateTime dateUpdated)
	{
		TimeSpan difference = DateTime.Now - dateUpdated;
		TimeSpan CheckUpdated = dateCreated - dateUpdated;
		if (Math.Abs(CheckUpdated.TotalMinutes) < 1)
		{
			return $"Posted on: {dateCreated}";
		}
		else
		{
			if (difference.TotalDays >= 1)
			{
				int days = Convert.ToInt32(difference.TotalDays);
				if (days >= 1 && days < 2)
				{
					return $"Last updated: 1 day ago";
				}
				else
				{
					return $"Last updated: {days} days ago";
				}
			}
			else if (difference.TotalHours >= 1)
			{
				return $"Last updated: {Convert.ToInt32(difference.Hours)} hour(s) ago";
			}
			else if (difference.TotalMinutes >= 1)
			{
				return $"Last updated: {Convert.ToInt32(difference.TotalMinutes)} minute(s) ago";
			}
			else
			{
				return "Just posted";
			}
		}

	}

	private double CalculateAverage(int value, int batteryLife, int performance, int userFriendly)
	{
		double average = (value + batteryLife + performance + userFriendly) / 4.0;
		return average;
	}

	private double CalculateProductAvg(List<Review>? Reviews)
	{
		double sum = 0;
		@if(Reviews == null)
		{
			return 0.0;
		}
		else
        {
			filteredReviews = Reviews.Where(q => q.ProductId == Id).ToList();
			foreach (var review in filteredReviews)
			{
                var rating = CalculateAverage(review.Value, review.BatteryLife, review.Performance, review.UserFriendly);
				sum += rating;
            }
			double productAvg = sum / filteredReviews.Count;
			return productAvg;
		}
	}

	async Task Delete(int reviewId)
	{
		if (Reviews != null)
		{
			var review = Reviews.First(r => r.Id == reviewId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {review.Title}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
				await OnInitializedAsync();
			}
		}
	}
}
