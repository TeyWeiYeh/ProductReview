@page "/products"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable


<h3 class="card=title">Products</h3>
<br />

<a href="/products/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Add New Product
</a>
<br />
<br />



@if (Products == null)
{
	<div class="alert alert-info">Loading Products...</div>
}
else
{
	<table class="table table-responsive" id="productsTable">
		<thead>
			<tr>
				<th>Product</th>
				<th>Brand</th>
				<th>Category</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var product in filteredProducts)
			{
				<tr>
					<td>@product.Name</td>
					<td>@(product.Brand?.Name ?? "No Brand")</td>
					<td>@(product.Category?.Name ?? "No Category")</td>
					<td>
						<a href="/products/view/@product.Id" class="btn btn-primary">
							@*buttons*@
							<span class="oi oi-book"></span>@*icon of button*@
						</a>
						<a href="/products/edit/@product.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>
						<button class="btn btn-danger" @onclick="@(()=>Delete(product.Id))">
							<span class="oi oi-delete"></span>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	[Parameter]
	public string? searchTerm { get; set; }
	private List<Product>? Products;
	private List<Product>? filteredProducts;
	private List<Favourite>? Favourites;
	Product product = new Product();

	protected async override Task OnParametersSetAsync()
	@*when page is loaded/loading, this method will be called*@
	{
		Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");

		ApplyFilter();

	}

	async Task Delete(int productId)
	@*pass ID into delete method will delete thingy*@
	{
		if (Products != null)
		{
			var product = Products.First(q => q.Id == productId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {product.Name}?");
			// prompts a pop up to confirm deletion of selected make item

			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.ProductsEndpoint}/{productId}");
				await OnParametersSetAsync();
			}
		}
	}

	private void ApplyFilter()
	{
		filteredProducts = Products.Where(r => (string.IsNullOrEmpty(searchTerm)) || r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#productsTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#productsTable");
	}
}


	