@page "/categories/products/all"
@page "/categories/products/all/{searchTerm}"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<h3>All Products page</h3>

@if (Products == null || Brands == null)
{
    <p>Loading products...</p>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Product</th>
                <th>Brand</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in filteredProducts)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Brand.Name</td>
                    <td>@product.Category.Name</td>
                    <td>
                        <a href="/products/view/@product.Id" class="btn btn-primary">
                            @*buttons*@
                            <span class="oi oi-book"></span>@*icon of button*@
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>AddToFavourites(product, product.Id))">
                            <span class="oi oi-heart"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
}



@code {
    [Parameter] public string? searchTerm { get; set; }
    private List<Product>? Products;
    private List<Product>? filteredProducts;
    private List<Brand>? Brands;
    private List<Category>? Categories;
    private string? Username;

    protected override async Task OnParametersSetAsync()
    {
        Brands = await _client.GetFromJsonAsync<List<Brand>>($"{Endpoints.BrandsEndpoint}");
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
        Username = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        filteredProducts = Products.Where(r => (string.IsNullOrEmpty(searchTerm)) || r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    async Task AddToFavourites(Product product, int productId)
    {
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to add {product.Name} to your favourites?");
        if (confirm)
        {

            Favourite favourite = new Favourite
                {
                    ProductId = productId,
                    Name = product.Name,
                    BrandId = product.BrandId,
                    CategoryId = product.CategoryId,
                    Username = Username
                };
            var response = await _client.PostAsJsonAsync($"{Endpoints.FavouritesEndpoint}", favourite);
            // If the response status code is Conflict, it means the product is already in the favorites
            if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                // Show an alert to the user and return from the method
                await js.InvokeVoidAsync("alert", $"{product.Name} is already in your favourites!");
                return;
            }
            else
            {
                await js.InvokeVoidAsync("alert", $"{product.Name} has been added to favourites");
            }
            await OnParametersSetAsync();
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#productsTable");
    }
}
