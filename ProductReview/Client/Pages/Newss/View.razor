@page "/news/view/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

@if(news != null)
{
    <div class="news-view">
        <a href="/" class="bi bi-arrow-left-short">
            View more news here
        </a>
        <br />
        <br />
        <div class="title">
            <h4>@news.Title</h4>
            <p class="lead">@news.Description</p>
            <div class="details">
               
                <div class="date">
                    <p>@CalculateMinutes(news.DateCreated,news.DateUpdated)</p>
                </div>
            </div>
        </div>
        <div class="body">
            <img class="image" src="@news.Image" alt="Image of news article" />
            <p>Date posted: @news.DateCreated.ToString("dd/MM/yyyy")</p>
        </div>
        <div class="content">
            @if (!string.IsNullOrEmpty(news.Content))
            {
                <p>@splitParagraph(news.Content).Item1</p>
                <p>@splitParagraph(news.Content).Item2</p>
                <p>@splitParagraph(news.Content).Item3</p>
            }
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    News? news = new News();
    private string? paragraph { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        news = await _client.GetFromJsonAsync<News>($"{Endpoints.NewsEndpoint}/{Id}");
    }

    private string CalculateMinutes(DateTime dateCreated, DateTime dateUpdated)
    {
        TimeSpan difference = DateTime.Now - dateUpdated;

        if (difference.TotalDays >= 1)
        {
            int days = Convert.ToInt32(difference.TotalDays);
            if (days >= 1 && days < 2)
            {
                return $"Last updated: 1 day ago";
            }
            else
            {
                return $"Last updated: {days} days ago";
            }
        }
        else if (difference.TotalHours >= 1)
        {
            return $"Last updated: {Convert.ToInt32(difference.Hours)} hour(s) ago";
        }
        else if (difference.TotalMinutes >= 1)
        {
            return $"Last updated: {Convert.ToInt32(difference.TotalMinutes)} minute(s) ago";
        }
        else
        {
            return "Just updated";
        }

    }

    private Tuple<string, string, string> splitParagraph(string paragraph)
    {
        int partLength = paragraph.Length / 3;

        // Split the paragraph into three parts
        string part1 = paragraph.Substring(0, partLength);
        string part2 = paragraph.Substring(partLength, partLength);
        string part3 = paragraph.Substring(2 * partLength);

        return new Tuple<string, string, string>(part1, part2, part3);
    }
}
