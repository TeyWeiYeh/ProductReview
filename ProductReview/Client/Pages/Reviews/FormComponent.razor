@inject HttpClient _client

<EditForm Model="@review" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<fieldset disabled="@Disabled">
	<div class="form-group">
		<label>Product:</label>
		<InputSelect @bind-Value="@review.ProductId" class="form-control">
			<option value="">-- Select Product --</option>
			@if (Products != null)
			{
				foreach (var product in Products)
				{
					<option value="@product.Id">@product.Name</option>
				}
			}
		</InputSelect>
	</div>
	<div class="form-group">
		<label>Review Title:</label>
		<InputText @bind-Value="@review.Title" class="form-control" />
		<ValidationMessage For="@(() => review.Title)" />
	</div>
	<div class="form-group">
		<label>Description:</label>
		<InputText @bind-Value="@review.Description" class="form-control" />
		<ValidationMessage For="@(() => review.Description)" />
	</div>
	<div class="container" >
		<label>Value for money:</label>
		<div class="star-rating">
			<input type="radio" id="star5" name="rating" value="5" @onchange="()=>UpdateReviewValue(5)"/><label for="star5"></label>
			<input type="radio" id="star4" name="rating" value="4" @onchange="()=>UpdateReviewValue(4)" /><label for="star4"></label>
			<input type="radio" id="star3" name="rating" value="3" @onchange="()=>UpdateReviewValue(3)" /><label for="star3"></label>
			<input type="radio" id="star2" name="rating" value="2" @onchange="()=>UpdateReviewValue(2)" /><label for="star2"></label>
			<input type="radio" id="star1" name="rating" value="1" @onchange="()=>UpdateReviewValue(1)" /><label for="star1"></label>
		</div>
	</div>
	<div class="form-group">
		<label>Battery life:</label>
		<InputNumber @bind-Value="@review.BatteryLife" class="form-control" />
		<ValidationMessage For="@(() => review.BatteryLife)" />
	</div>
	<div class="form-group">
		<label>Performance:</label>
		<InputNumber @bind-Value="@review.Performance" class="form-control" />
		<ValidationMessage For="@(() => review.Performance)" />
	</div>
	<div class="form-group">
		<label>User Friendliness:</label>
		<InputNumber @bind-Value="@review.UserFriendly" class="form-control" />
		<ValidationMessage For="@(() => review.UserFriendly)" />
	</div>
	@if (review.Id > 0 && Disabled)
	{
		<div class="form-group">
			<label>Date of comment:</label>
			<InputDate @bind-Value="@review.DateCreated" class="form-control" />
			<ValidationMessage For="@(() => review.DateCreated)" />
		</div>
	}
	</fieldset>

	@if (!Disabled)
	{
		<button type="submit" class="btn btn-success btn-block">
			@ButtonText
		</button>
	}


	<BackToList Target="reviews"/>
</EditForm>

@code {
	[Parameter] public bool Disabled { get; set; }
	[Parameter] public Review? review { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }
	private IList<Product>? Products;

	protected async override Task OnInitializedAsync()
	{
		Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
	}

	private void UpdateReviewValue(int value)
    {
        review.Value = value;
    }
}
