@inject HttpClient _client

<EditForm Model="@review" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<fieldset disabled="@Disabled">
	<div class="form-group">
		<label>Review Title:</label>
		<InputText @bind-Value="@review.Title" class="form-control" />
		<ValidationMessage For="@(() => review.Title)" />
	</div>
	<div class="form-group">
		<label>Description:</label>
		<InputText @bind-Value="@review.Description" class="form-control" />
		<ValidationMessage For="@(() => review.Description)" />
	</div>
	<div class="form-group">
		<label>Value for money:</label>
		<div>
			<InputRadioGroup @bind-Value="@review.Value" class="form-control">
				<InputRadio Value="0" /> 0
				<InputRadio Value="1" /> 1
				<InputRadio Value="2" /> 2
				<InputRadio Value="3" /> 3
				<InputRadio Value="4" /> 4
				<InputRadio Value="5" /> 5
			</InputRadioGroup>
			@* @foreach(var rate in RatingValue)
			{
				<div>
						<span @onclick="() => SetRating(rate)" class="bi bi-star-fill @(review.Value >= rate ? "#FFD700" : "")"></span>
				</div>
			} *@
			<ValidationMessage For="@(() => review.Value)" />
		</div>
	</div>
	<div class="form-group">
		<label>Battery life:</label>
		<div>
			<InputRadioGroup @bind-Value="@review.BatteryLife" class="form-control">
				<InputRadio Value="0" /> 0
				<InputRadio Value="1" /> 1
				<InputRadio Value="2" /> 2
				<InputRadio Value="3" /> 3
				<InputRadio Value="4" /> 4
				<InputRadio Value="5" /> 5
			</InputRadioGroup>
			<ValidationMessage For="@(() => review.BatteryLife)" />
		</div>
	</div>
	<div class="form-group">
		<label>Performance:</label>
		<div>
			<InputRadioGroup @bind-Value="@review.Performance" class="form-control">
				<InputRadio Value="0" /> 0
				<InputRadio Value="1" /> 1
				<InputRadio Value="2" /> 2
				<InputRadio Value="3" /> 3
				<InputRadio Value="4" /> 4
				<InputRadio Value="5" /> 5
			</InputRadioGroup>
			<ValidationMessage For="@(() => review.Performance)" />
		</div>
	</div>
	<div class="form-group">
		<label>User Friendliness:</label>
		<div>
			<InputRadioGroup @bind-Value="@review.UserFriendly" class="form-control">
				<InputRadio Value="0" /> 0
				<InputRadio Value="1" /> 1
				<InputRadio Value="2" /> 2
				<InputRadio Value="3" /> 3
				<InputRadio Value="4" /> 4
				<InputRadio Value="5" /> 5
			</InputRadioGroup>
			<ValidationMessage For="@(() => review.UserFriendly)" />
		</div>
	</div>
	@if (!Disabled)
	{
	<div class="form-group">
			<label>Image:</label>
			<InputFile OnChange="OnFileChange" />
			<ValidationMessage For="@(() => review.Image)" />
	</div>
	}
	
	
	@if (review.Id > 0 && Disabled)
	{
		<div class="form-group">
			<label>Date of comment:</label>
			<InputDate @bind-Value="@review.DateCreated" class="form-control" />
			<ValidationMessage For="@(() => review.DateCreated)" />
		</div>
	}
	</fieldset>

	@if (!Disabled)
	{
		<button type="submit" class="btn btn-success btn-block">
			@ButtonText
		</button>
	}

	<BackToList Target="reviews"/>
</EditForm>

@code {
	[Parameter] public bool Disabled { get; set; }
	[Parameter] public Review? review { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }
	private IList<Product>? Products;

	// List<int> RatingValue = new List<int>
	// {
	// 	0,1,2,3,4,5
	// };

	protected async override Task OnInitializedAsync()
	{
		Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
	}

	// private void SetRating(int value)
 //    {
 //        review.Value = value;
 //    }

	private async Task OnFileChange(InputFileChangeEventArgs e)
	{
		var format = "image/png";
		var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
		var buffer = new byte[resizedImage.Size];
		await resizedImage.OpenReadStream().ReadAsync(buffer);
		var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
		review.Image = imageData;

		Console.WriteLine(review.Image);
	}
}
