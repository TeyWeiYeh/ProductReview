@inject HttpClient _client

<EditForm Model="@review" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-group">
		<label>Product:</label>
		<InputSelect @bind-Value="@review.ProductId" class="form-control">
			<option value="">-- Select Product --</option>
			@if (Products != null)
			{
				foreach (var product in Products)
				{
					<option value="@product.Id">@product.Name</option>
				}
			}
		</InputSelect>
	</div>
	<div class="form-group">
		<label>Review Title:</label>
		<InputText @bind-Value="@review.Title" class="form-control" />
		<ValidationMessage For="@(() => review.Title)" />
	</div>
	<div class="form-group">
		<label>Description:</label>
		<InputText @bind-Value="@review.Description" class="form-control" />
		<ValidationMessage For="@(() => review.Description)" />
	</div>
	<div class="form-group">
		<label>Value for money:</label>
		<InputNumber @bind-Value="@review.Value" class="form-control" />
		<ValidationMessage For="@(() => review.Value)" />
	</div>
	<div class="form-group">
		<label>Battery life:</label>
		<InputNumber @bind-Value="@review.BatteryLife" class="form-control" />
		<ValidationMessage For="@(() => review.BatteryLife)" />
	</div>
	<div class="form-group">
		<label>Performance:</label>
		<InputNumber @bind-Value="@review.Performance" class="form-control" />
		<ValidationMessage For="@(() => review.Performance)" />
	</div>
	<div class="form-group">
		<label>User Friendliness:</label>
		<InputNumber @bind-Value="@review.UserFriendly" class="form-control" />
		<ValidationMessage For="@(() => review.UserFriendly)" />
	</div>
	@if (review.Id > 0)
	{
		<div class="form-group">
			<label>Date of comment:</label>
			<InputDate @bind-Value="@review.DateCreated" class="form-control" />
			<ValidationMessage For="@(() => review.DateCreated)" />
		</div>
	}

	<button type="submit" class="btn btn-success btn-block">
		@ButtonText
	</button>

	<BackToList Target="reviews"/>
</EditForm>

@code {

	[Parameter] public Review? review { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }
	private IList<Product>? Products;
	protected async override Task OnInitializedAsync()
	{
		Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
	}
}
