@page "/reviews/create"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js

<h3>Create a review</h3>

<FormComponent review="review" ButtonText="Create review" OnValidSubmit="@CreateReview"/>

@* <EditForm Model="@review" OnValidSubmit="CreateReview">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-group">
		<label>Product:</label>
		<InputSelect @bind-Value="@review.ProductId" class="form-control">
		<option value="">-- Select Product --</option>
            @if ( Products != null)
            {
                foreach (var product in Products)
                {
                    <option value="@product.Id">@product.Name</option>
                }
            }
		</InputSelect>
	</div>
	<div class="form-group">
		<label>Review Title:</label>
		<InputText @bind-Value="@review.Title" class="form-control" />
		<ValidationMessage For="@(() => review.Title)" />
	</div>
	<div class="form-group">
        <label>Description:</label>
        <InputText @bind-Value="@review.Description" class="form-control" />
        <ValidationMessage For="@(() => review.Description)" />
	</div>
	<div class="form-group">
		<label>Value for money:</label>
		<br />
		<fieldset class="rating">
			<input type="radio" id="star5" name="rating" value="5" />
			<label for="star5">5 stars</label>
			<input type="radio" id="star4" name="rating" value="4" />
			<label for="star4">4 stars</label>
			<input type="radio" id="star3" name="rating" value="3" />
			<label for="star3">3 stars</label>
			<input type="radio" id="star2" name="rating" value="2" />
			<label for="star2">2 stars</label>
			<input type="radio" id="star1" name="rating" value="1" />
			<label for="star1">1 star</label>
		</fieldset>
	</div>
	<br />
	<br />
	<div class="form-group">
		<label>Battery life:</label>
		<InputNumber @bind-Value="@review.BatteryLife" class="form-control" />
		<ValidationMessage For="@(() => review.BatteryLife)" />
	</div>
	<div class="form-group">
		<label>Performance:</label>
		<InputNumber @bind-Value="@review.Performance" class="form-control" />
		<ValidationMessage For="@(() => review.Performance)" />
	</div>
	<div class="form-group">
		<label>User Friendliness:</label>
		<InputNumber @bind-Value="@review.UserFriendly" class="form-control" />
		<ValidationMessage For="@(() => review.UserFriendly)" />
	</div>
	@if (review.Id > 0)
	{
		<div class="form-group">
			<label>Date of comment:</label>
			<InputDate @bind-Value="@review.DateCreated" class="form-control" />
			<ValidationMessage For="@(() => review.DateCreated)" />
		</div>
	}
	<div class="form-group">
		<label>Image URL:</label>
		<InputText @bind-Value="@review.Image" class="form-control" />
		<ValidationMessage For="@(() => review.Image)" />
	</div>

	<button type="submit" class="btn btn-success btn-block">
        Share your review
	</button>
</EditForm> *@

@code {
	Review? review = new Review();

	private IList<Product>? Products;
	

	protected async override Task OnInitializedAsync()
	{
		Products = await _client.GetFromJsonAsync<List<Product>>(Endpoints.ProductsEndpoint);
	}

	private async Task CreateReview()
	{
		await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, review);
		_navManager.NavigateTo("/reviews/");
	}

	

}
