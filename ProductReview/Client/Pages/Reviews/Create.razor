@page "/reviews/create/{id:int}"
@page "/reviews/create"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Write a review</h3>
<hr />

<InputFile OnChange="OnFileChange" />
<br />
<br

<FormComponent review="review" ButtonText="Create review" OnValidSubmit="@CreateReview"/>

<br />
<button @onclick="()=>HandleButton()" class="btn btn-secondary bi bi-backspace">Cancel</button>

@code {
	Review? review = new Review();
	[Parameter]public int id { get; set; }
	public string? Username { get; set; }

	private List<Product>? Products;


	protected async override Task OnInitializedAsync()
	{
		Products = await _client.GetFromJsonAsync<List<Product>>(Endpoints.ProductsEndpoint);
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		Username = authState.User.Identity.Name;

	}

	private async Task CreateReview()
	{
		review.ProductId = id;
		review.Username = Username;
		await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, review);
		_navManager.NavigateTo($"/products/view/{id}");
	}

	private void HandleButton()
	{
		_navManager.NavigateTo($"/products/view/{id}");
	}

	private async Task OnFileChange(InputFileChangeEventArgs e)
	{
		var format = "image/png";
		var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
		var buffer = new byte[resizedImage.Size];
		await resizedImage.OpenReadStream().ReadAsync(buffer);
		var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
		review.Image = imageData;

		Console.WriteLine(review.Image);
	}

	

}
