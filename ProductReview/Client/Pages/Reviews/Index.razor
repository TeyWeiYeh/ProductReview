@page "/reviews/"
@inject HttpClient _client
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]



<h3 class="card-title">My Reviews</h3>

@if (Reviews == null)
{
	<div class="alert alert-info">Loading Reviews...</div>
}
else
{

	<table class="table table-responsive" id="productsTable">
		<thead>
			<tr>
				<th>Reviews</th>
				<th>Description</th>
				<th>Value</th>
				<th>BatteryLife</th>
				<th>Performance</th>
				<th>UserFriendly</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var review in Reviews.Where(r=>r.Username==Username))
			{
				<tr>
					<td>@review.Title</td>
					<td>@review.Description</td>
					<td class="star-rating" data-rating="@review.Value">
						<div style="visibility: hidden;">
							@review.Value
						</div>
					</td>
					<td class="star-rating" data-rating="@review.BatteryLife">
						<div style="visibility: hidden;">
							@review.BatteryLife
						</div>
					</td>
					<td class="star-rating" data-rating="@review.Performance">
						<div style="visibility: hidden;">
							@review.Performance
						</div>
					</td>
					<td class="star-rating" data-rating="@review.UserFriendly">
						<div style="visibility: hidden;">
							@review.UserFriendly
						</div>
					</td>
					<td>
						<a href="/reviews/view/@review.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>
						<a href="/reviews/edit/@review.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>
						<button class="btn btn-danger" @onclick="@(()=>Delete(review.Id))"><span class="oi oi-delete"></span></button>
					</td>
				</tr>
			}
		</tbody>
	</table>
	
	 
}

@code {
	private IList<Review>? Reviews;
	Product product = new Product();
	public string? Username { get; set; }

	protected async override Task OnInitializedAsync()
	{
		Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		Username = authState.User.Identity.Name;
	}

	async Task Delete(int reviewId)
	{
		if (Reviews != null)
		{
			var review = Reviews.First(r => r.Id == reviewId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {review.Title}?");
			if (confirm)
			{ 
				await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}"); 
				await OnInitializedAsync();
			}
		}
	}

	private string CalculateMinutes(DateTime dateCreated, DateTime dateUpdated)
	{
		TimeSpan difference = DateTime.Now - dateUpdated;
		TimeSpan CheckUpdated = dateCreated - dateUpdated;
		if (Math.Abs(CheckUpdated.TotalMinutes) < 1)
		{
			return $"Posted on: {dateCreated}";
		}
		else
		{
			if (difference.TotalDays >= 1)
			{
				int days = Convert.ToInt32(difference.TotalDays);
				if (days >= 1 && days < 2)
				{
					return $"Last updated: 1 day ago";
				}
				else
				{
					return $"Last updated: {days} days ago";
				}
			}
			else if (difference.TotalHours >= 1)
			{
				return $"Last updated: {Convert.ToInt32(difference.Hours)} hour(s) ago";
			}
			else if (difference.TotalMinutes >= 1)
			{
				return $"Last updated: {Convert.ToInt32(difference.TotalMinutes)} minute(s) ago";
			}
			else
			{
				return "Just posted";
			}
		}

	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#productsTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#productsTable");
	}
}
