@page "/reviews/view/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js
@inject AuthenticationStateProvider _authState

<h3 class="card-title">Viewing Review by @review.Username</h3>

<button @onclick="CreateCommentPage" class="btn btn-secondary">Write a comment</button>
<div><img src="@review.Image" width="500" /></div>
<FormComponent review="review" ButtonText="Create review" Disabled="true"/>
<button class="btn btn-outline-dark btn-block" @onclick="()=>HandleButton()"><span class="oi oi-arrow-left"></span>Back to product</button>


@if(Comments != null)
{
    @foreach(var comment in Comments.Where(c=>c.ReviewId==Id))
    {
        <div class="card border-success mb-3" style="max-width: 18rem;">
            <div class="card-header bg-transparent border-success">@comment.Username</div>
            <div class="card-body text-success">
                <p class="card-text">@comment.Description</p>
				<p class="card-text">
					@if (comment.Username == Username)
					{
						<a href="/comments/edit/@comment.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>
						<button class="btn btn-danger" @onclick="@(()=>Delete(comment.Id))">
							<span class="oi oi-delete"></span>
						</button>
					}
				</p>
            </div>
            <div class="card-footer bg-transparent border-success">@CalculateMinutes(comment.DateCreated,comment.DateUpdated)</div>
        </div>
    }
}



@code {
    [Parameter]public int Id { get; set; }
    private List<Comment>? Comments;
	private string? Username;

    Review? review = new Review();

    protected async override Task OnParametersSetAsync()
    {
        review = await _client.GetFromJsonAsync<Review>($"{Endpoints.ReviewsEndpoint}/{Id}");
        Comments = await _client.GetFromJsonAsync<List<Comment>>($"{Endpoints.CommentsEndpoint}");
		var authState = await _authState.GetAuthenticationStateAsync();
		Username = authState.User.Identity.Name;
    }

    private void CreateCommentPage()
    {
        _navManager.NavigateTo($"/comments/create/{Id}");
    }

	private string CalculateMinutes(DateTime dateCreated, DateTime dateUpdated)
	{
		TimeSpan difference = DateTime.Now - dateUpdated;
		TimeSpan CheckUpdated = dateCreated - dateUpdated;
		if (Math.Abs(CheckUpdated.TotalMinutes) < 1)
		{
			return $"Posted on: {dateCreated}";
		}
		else
		{
			if (difference.TotalDays >= 1)
			{
				int days = Convert.ToInt32(difference.TotalDays);
				if (days >= 1 && days < 2)
				{
					return $"Last updated: 1 day ago";
				}
				else
				{
					return $"Last updated: {days} days ago";
				}
			}
			else if (difference.TotalHours >= 1)
			{
				return $"Last updated: {Convert.ToInt32(difference.Hours)} hour(s) ago";
			}
			else if (difference.TotalMinutes >= 1)
			{
				return $"Last updated: {Convert.ToInt32(difference.TotalMinutes)} minute(s) ago";
			}
			else
			{
				return "Just updated";
			}
		}

	}

	private async Task Delete(int commentId)
	{
		if (Comments != null)
		{
			var comment = Comments.First(c => c.Id == commentId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {comment.Description}?");
			if (confirm)
			{ 
				await _client.DeleteAsync($"{Endpoints.CommentsEndpoint}/{commentId}"); 
				await OnParametersSetAsync();
			}
		}
	}

	private void HandleButton()
    {
        _navManager.NavigateTo($"/products/view/{review.ProductId}");
    }
}
